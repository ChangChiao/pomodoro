{"version":3,"sources":["MainPanel.js","store/Reducer.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["MainPanel","forwardRef","props","ref","totalTime","useState","peroid","setPeroid","clockDate","setclockDate","clockTime","setclockTime","todoList","useSelector","state","isRunning","dispatch","useDispatch","intervalId","useRef","clockId","useImperativeHandle","resetTimer","setIsRunning","boolean","type","payload","addZero","num","str","toString","length","isDelete","clearInterval","current","index","firstItem","useMemo","isRelaxTime","showIcon","status","useEffect","setInterval","Date","toLocaleDateString","toLocaleTimeString","className","timeStamp","mm","Math","floor","ss","formateTime","onClick","alert","startTime","getTime","nowTime","distance","countDown","src","alt","evt","ADD_TODOLIST","DELETE_TODOLIST","REVISE_TODOLIST","REVISEDONE_TODOLIST","ADD_DONELIST","REVISE_ISRUNNING","initState","doneList","reducer","action","arrTodo","push","title","isEdit","splice","forEach","ele","i","name","arrDone","TodoList","setTitle","setName","setStatus","addTodoList","changeTab","value","onKeyPress","event","charCode","onChange","e","target","map","val","setReset","k","store","createStore","App","mainRef","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d94e6610.chunk.js","sourcesContent":["import { useEffect, useState, useRef, useMemo, useImperativeHandle, forwardRef} from \"react\"\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst MainPanel = forwardRef((props, ref) => {\n    const totalTime = 25 * 60 * 1000\n    const relaxTime = 5 * 60 * 1000\n    // const totalTime = 1 * 60 * 1000\n    // const relaxTime = 0.5 * 60 * 1000\n    const [peroid, setPeroid] = useState(totalTime);\n    const [clockDate, setclockDate] = useState('')\n    const [clockTime, setclockTime] = useState('')\n    const todoList = useSelector(state => state.todoList);\n    const isRunning = useSelector(state => state.isRunning)\n    const dispatch = useDispatch();\n    let intervalId = useRef(null)\n    let clockId = useRef(null)\n\n    useImperativeHandle(ref, () => ({\n        resetTimer\n    }))\n\n\n    const countDown = () => {\n        const startTime = new Date().getTime()\n        intervalId.current = setInterval(() => {\n            const nowTime = new Date().getTime()\n            const distance = peroid - (nowTime - startTime)\n            // console.log('distance', distance);\n            setPeroid(distance)\n            if (distance <= 0) {\n                resetTimer()\n            }\n        }, 400);\n    }\n\n    const startTimer = () => {\n        clockId.current = setInterval(() => {\n            setclockDate(new Date().toLocaleDateString())\n            setclockTime(new Date().toLocaleTimeString())\n        }, 400);\n    }\n\n    const pauseTimer = () => {\n        if (isRunning) {\n            setIsRunning(false)\n            clearInterval(intervalId.current)\n        } else {\n            if (!firstItem) {\n                alert('請先新增待辦事項!')\n                return\n            }\n            setIsRunning(true)\n            countDown()\n        }\n    }\n\n    const setIsRunning = (boolean) => {\n        dispatch({\n            type: 'REVISE_ISRUNNING',\n            payload: { boolean },\n        });\n    }\n\n    const formateTime = (timeStamp) => {\n        const mm = Math.floor(timeStamp / (60 * 1000))\n        const ss = Math.floor((timeStamp - mm * 60 * 1000) / 1000)\n        return `${addZero(mm)}:${addZero(ss)}`\n    }\n    const addZero = (num) => {\n        const str = num.toString()\n        if (str.length === 1) return '0' + str\n        return str\n    }\n\n    const deleteItem = (index) => {\n        dispatch({\n            type: 'DELETE_TODOLIST',\n            payload: { index },\n        });\n    }\n\n    const handleReset = (evt, isDelete) =>{\n        resetTimer(isDelete)\n    }\n\n    const resetTimer = (isDelete) => {\n        if (todoList.length === 0) return\n        clearInterval(intervalId.current)\n        setPeroid(totalTime)\n        setIsRunning(false)\n        if (!isDelete) {\n            dispatch({\n                type: 'ADD_DONELIST',\n            });\n            deleteItem(0)\n        }\n    }\n\n\n    const firstItem = useMemo(() => {\n        return (todoList[0] && todoList[0]['title']) || null\n    }, [todoList])\n\n    const isRelaxTime = useMemo(() => {\n        return peroid < relaxTime\n    }, [peroid])\n\n    const showIcon = useMemo(() => {\n        const status = isRelaxTime ? 'green' : 'orange'\n        const isWork = isRunning ? 'pause' : 'play'\n        return `/images/icon-${isWork}--${status}.svg`\n    }, [isRelaxTime, isRunning])\n\n    useEffect(() => {\n        startTimer()\n        return () => {\n            clearInterval(intervalId.current)\n            clearInterval(clockId.current)\n        }\n    }, [])\n\n    return (\n        <section>\n            <div className=\"time_zone\">\n                <span>{clockDate}</span>\n                <span>{clockTime}</span>\n            </div>\n            <h1 className=\"time\">Time:{formateTime(peroid)}</h1>\n            <h2>當前任務：{firstItem ? firstItem : '尚未新增待辦事項'}</h2>\n            {isRelaxTime ? (<h3>\n                <span>休息，</span>\n                是為了下一次的努力。\n            </h3>) : null}\n            <div className=\"btn_list\">\n                <button className=\"start\" onClick={pauseTimer} >\n                    <img src={showIcon} alt=\"\" />\n                </button>\n                {\n                    firstItem ? (<button onClick={handleReset}>\n                        <i className=\"fas fa-times\"></i>\n                    </button>) : null\n                }\n            </div>\n            <img className=\"tomato\" src={`/images/tomato--${isRelaxTime ? 'green' : 'orange'}.svg`} />\n        </section>\n    )\n})\n\nexport default MainPanel","const ADD_TODOLIST = 'ADD_TODOLIST';\nconst DELETE_TODOLIST = 'DELETE_TODOLIST'\nconst REVISE_TODOLIST = 'REVISE_TODOLIST'\nconst REVISEDONE_TODOLIST = 'REVISEDONE_TODOLIST'\nconst ADD_DONELIST = 'ADD_DONELIST'\nconst REVISE_ISRUNNING = 'REVISE_ISRUNNING'\n\nconst initState = {\n    todoList: [],\n    doneList: [],\n    isRunning: false\n};\n\nconst reducer = (state = initState, action) => {\n    switch (action.type) {\n        case ADD_TODOLIST: {\n            const arrTodo = [...state.todoList];\n            arrTodo.push({ title: action.payload.title, isEdit: false });\n            return {\n                ...state,\n                todoList: arrTodo,\n            };\n        }\n        case DELETE_TODOLIST: {\n            const arrTodo = [...state.todoList];\n            arrTodo.splice(action.payload.index, 1)\n            return {\n                ...state,\n                todoList: arrTodo,\n            };\n        }\n\n        case REVISE_TODOLIST: {\n            const arrTodo = [...state.todoList];\n            arrTodo.forEach((ele, i) => {\n                arrTodo[i].isEdit = false\n            })\n            arrTodo[action.payload.index].isEdit = true\n            return {\n                ...state,\n                todoList: arrTodo,\n            };\n        }\n\n        case REVISEDONE_TODOLIST: {\n            const arrTodo = [...state.todoList];\n            arrTodo[action.payload.index].title = action.payload.name\n            arrTodo[action.payload.index].isEdit = false\n            return {\n                ...state,\n                todoList: arrTodo,\n            };\n        }\n\n        case ADD_DONELIST: {\n            const arrDone = [...state.doneList];\n            arrDone.push( state.todoList[0].title );\n            return {\n                ...state,\n                doneList: arrDone,\n            };\n        }\n\n        case REVISE_ISRUNNING:{\n            const boolean = action.payload.boolean\n            return {\n                ...state,\n                isRunning: boolean,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default reducer","import { useState, useMemo } from \"react\"\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst TodoList = (props) => {\n    const todoList = useSelector(state => state.todoList);\n    const doneList = useSelector(state => state.doneList);\n    const isRunning = useSelector(state => state.isRunning)\n    const [title, setTitle] = useState('')\n    const [name, setName] = useState('')\n    const [status, setStatus] = useState(true)\n\n    const dispatch = useDispatch();\n\n    const addTodoList = () => {\n        dispatch({\n            type: 'ADD_TODOLIST',\n            payload: { title },\n        });\n        setTitle('')\n    };\n\n\n    const deleteItem = (index) => {\n        dispatch({\n            type: 'DELETE_TODOLIST',\n            payload: { index },\n        });\n        if (index === 0) props.setReset()\n    }\n\n    const reviseItem = (index) => {\n        const status = todoList[index].isEdit\n        if (status) {\n            dispatch({\n                type: 'REVISEDONE_TODOLIST',\n                payload: { index, name },\n            });\n        } else {\n            dispatch({\n                type: 'REVISE_TODOLIST',\n                payload: { index },\n            });\n            setName(todoList[index].title)\n        }\n    }\n\n    const changeTab = () => {\n        setStatus(!status)\n    }\n\n    const onKeyUp = (event) => {\n        if (event.charCode === 13) {\n            addTodoList()\n        }\n    }\n\n    // const peddingList = useMemo(() => {\n    //     return status ? todoList : doneList\n    // }, [status])\n\n    return (\n        <aside>\n            <header>\n                <h2>待辦清單</h2>\n                <div className=\"tab\">\n                    <span className={status ? 'active' : ''} onClick={changeTab}>未完成</span>\n                    <span className={!status ? 'active' : ''} onClick={changeTab}>已完成</span>\n                </div>\n            </header>\n            <div className=\"title_box\">\n                <input type=\"text\" value={title} onKeyPress={onKeyUp} onChange={e => setTitle(e.target.value)} />\n                <button className=\"add_btn\" onClick={addTodoList}>\n                    <i className=\"fas fa-plus\"></i>\n                </button>\n            </div>\n            <ul>\n                {status ? todoList.map((val, i) => {\n                    return (\n                        <li key={i}>\n                            {val.isEdit ? null : <span>{val.title} {isRunning && i === 0 ? <span className=\"ing\">(進行中)</span> : null}</span>}\n                            {val.isEdit ? <input type=\"text\" value={name} onChange={e => setName(e.target.value)} /> : null}\n                            <span>\n                                <img src=\"/images/icon-edit.svg\" onClick={() => reviseItem(i)} alt=\"\" />\n                                <img src=\"/images/icon-delete.svg\" onClick={() => deleteItem(i)} alt=\"\" />\n                            </span>\n                        </li>\n                    )\n                }) : doneList.map((ele, k) => {\n                    return (\n                        <li className=\"done_item\" key={k}>{ele}</li>\n                    )\n                })}\n            </ul>\n        </aside>\n    )\n}\n\nexport default TodoList","import './MainPanel'\nimport './scss/style.scss'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/Reducer';\nimport MainPanel from './MainPanel';\nimport TodoList from './TodoList';\nimport { useRef } from 'react';\n\nconst store = createStore(reducer);\n\nfunction App() {\n  const mainRef = useRef(null)\n\n  const reset = () => {\n    console.log('mainRef.current', mainRef.current)\n    mainRef.current.resetTimer(true)\n  }\n  \n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <TodoList setReset={reset} />\n        <MainPanel ref={mainRef} />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}